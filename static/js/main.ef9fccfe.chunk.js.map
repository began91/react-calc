{"version":3,"sources":["components/OperationDisplay.js","components/Result.js","features/calcSlice.js","components/Keys.js","components/Calculator.js","components/History.js","store.js","App.js","serviceWorker.js","index.js"],"names":["OperationDisplay","props","equation","useSelector","state","calc","firstNumber","firstOperator","secondNumber","secondOperator","id","Result","result","status","initialState","history","evaluate","includes","a","operator","b","Number","String","toFixed","slice","unshift","calcSlice","createSlice","name","reducers","handleKey","action","payload","type","key","toString","length","handleNumKey","handleDecimal","handleOperator","Object","assign","handleClear","handleNeg","loadHistoryIndex","actions","Key","dispatch","useDispatch","value","className","isActive","onClick","NumKeyPad","NumKeys","i","operators","Operators","activeOperator","map","ClearKeys","Keys","document","addEventListener","e","isInteger","match","preventDefault","Calculator","History","historyList","entry","configureStore","reducer","App","store","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ef9fccfe.chunk.js","sourcesContent":["import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\n\r\nconst OperationDisplay = props => {\r\n    const equation = useSelector(state => {\r\n        return state.calc.firstNumber + (state.calc.firstOperator ? ` ${state.calc.firstOperator} `: '') + (state.calc.secondNumber ? state.calc.secondNumber : '') + (state.calc.secondOperator ? ` ${state.calc.secondOperator}` : '');\r\n    });\r\n    return (\r\n    <div id=\"operation-display\">\r\n        {equation}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default OperationDisplay;","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\n\r\nconst Result = () => {\r\n    const result = useSelector(state => {\r\n        switch (state.calc.status) {\r\n            case 'result':\r\n                return state.calc.result;\r\n            case 'fresh':\r\n                return '0';\r\n            case 'firstNumber':\r\n                return state.calc.firstNumber;\r\n            case 'secondNumber':\r\n                return state.calc.secondNumber;\r\n            case 'firstOperator':\r\n                return state.calc.firstNumber;\r\n            case 'secondOperator':\r\n                return state.calc.result;\r\n            default:\r\n                return '0';\r\n        }\r\n    });\r\n    \r\n    return (\r\n    <div id=\"result\">\r\n        {result}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Result;","import {createSlice} from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    firstNumber: '0',\r\n    secondNumber: null,\r\n    firstOperator: null,\r\n    secondOperator: null,\r\n    result: null,\r\n    status: 'fresh',\r\n    history: []\r\n};\r\n\r\nconst handleNumKey = (state, key) => {\r\n    if (state.status.includes('Number')) {\r\n        if (state[state.status] === '0') {\r\n            state[state.status] = key.toString();\r\n        } else if (state[state.status].length < 9) {\r\n            state[state.status] += key.toString();\r\n        }\r\n    } else if (state.status.includes('Operator')) {\r\n        state.secondNumber = key.toString();\r\n        state.status = 'secondNumber';\r\n        state.firstOperator = state.secondOperator || state.firstOperator;\r\n        state.secondOperator = null;\r\n        state.firstNumber = state.result || state.firstNumber;\r\n    } else {//result or fresh\r\n        state.firstOperator = null;\r\n        state.secondNumber = null;\r\n        state.result = null;\r\n        state.firstNumber = key.toString();\r\n        state.status = 'firstNumber';\r\n    }\r\n}\r\n\r\nconst handleDecimal = (state) => {//can probably combine logic with number;\r\n    if (state.status.includes('Number')) {\r\n        if (!state[state.status].includes('.') && state[state.status].length <= 8) {\r\n            state[state.status] += '.';\r\n        }\r\n    } else if (state.status.includes('Operator')) {\r\n        state.secondNumber = '0.';\r\n        state.status = 'secondNumber';\r\n        state.firstOperator = state.secondOperator || state.firstOperator;\r\n        state.secondOperator = null;\r\n        state.firstNumber = state.result || state.firstNumber;\r\n    } else {\r\n        state.firstOperator = null;\r\n        state.secondNumber = null;\r\n        state.firstNumber = '0.';\r\n        state.status = 'firstNumber';\r\n    }\r\n}\r\n\r\nconst handleOperator = (state, key) => {\r\n    if (state.status === 'fresh' || state.status === 'firstNumber') {\r\n        state.status = 'firstOperator';\r\n        state.firstOperator = key;\r\n    } else if (state.status === 'secondNumber') {\r\n        evaluate(state);\r\n        state.status = 'secondOperator';\r\n        state.secondOperator = key;\r\n    } else if (state.status.includes('Operator')) {\r\n        state[state.status] = key;\r\n    } else {//result\r\n        state.firstNumber = state.result;\r\n        state.result = null;\r\n        state.secondNumber = null;\r\n        state.firstOperator = key;\r\n        state.status = 'firstOperator';\r\n    }\r\n}\r\n\r\nconst handleClear = (state, key) => {\r\n    if (key === 'C' || state.status === 'fresh' || (state.status === 'firstNumber' && state.firstNumber.length === 1) || state.status === 'result') {\r\n        const history = state.history;\r\n        state = Object.assign({}, initialState, {history});\r\n    } else if (state.status.includes('Operator')) {\r\n        state[state.status] = null;\r\n        state.status = state.status.slice(0,-8) + 'Number';\r\n    } else {//state = first or second number\r\n        if (state[state.status].length === 1) {\r\n            state[state.status] = null;\r\n            state.status = 'firstOperator';\r\n        } else {\r\n            state[state.status] = state[state.status].slice(0,-1);\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nconst evaluate = (state) => {\r\n    if (state.status === 'result') {\r\n        state.firstNumber = state.result;\r\n    } else if (state.status.includes('Operator')) {\r\n        state.firstNumber = state.result || state.firstNumber;\r\n        state.secondNumber = state.result || state.firstNumber;\r\n        state.firstOperator = state.secondOperator || state.firstOperator;\r\n        state.secondOperator = null;\r\n    }\r\n    let a = state.firstNumber;\r\n    let operator = state.firstOperator;\r\n    let b = state.secondNumber;\r\n    let result;\r\n    if (b==='-') {\r\n        result = 'Error';\r\n    } else {\r\n        switch (operator) {\r\n            case '+':\r\n                result =  (Number(a) + Number(b));\r\n                break;\r\n            case '-':\r\n                result = (Number(a) - Number(b));\r\n                break;\r\n            case '/':\r\n                if (Number(b) === 0) {\r\n                    result = 'Error';\r\n                } else {\r\n                    result = (Number(a) / Number(b));\r\n                }\r\n                break;\r\n            case '*':\r\n                result = (Number(a) * Number(b));\r\n                break;\r\n            default: \r\n                result = Number(a);\r\n                break;\r\n            }\r\n        }\r\n    if (result > 999999999) {\r\n        result = '999999999';\r\n    } else {\r\n        result = String(Number(result.toFixed(8))).slice(0,9);\r\n    }\r\n    state.result = result;\r\n    state.status = 'result';\r\n    state.history.unshift({\r\n        firstNumber: state.firstNumber,\r\n        firstOperator: state.firstOperator,\r\n        secondNumber: state.secondNumber,\r\n        result: state.result\r\n    });\r\n}\r\n\r\nconst handleNeg = (state) => {\r\n    if (state.status === 'fresh') {\r\n        state.firstNumber = '-';\r\n        state.status = 'firstNumber';\r\n    } else if (state.status.includes('Number')) {\r\n        state[state.status] = String(-1*state[state.status]);\r\n    } else if (state.status.includes('Operator')) {\r\n        state.secondNumber = '-';\r\n        state.status = 'secondNumber';\r\n        state.firstOperator = state.secondOperator || state.firstOperator;\r\n        state.secondOperator = null;\r\n        state.firstNumber = state.result || state.firstNumber;\r\n    } else {\r\n        state.firstNumber = String(-1 * state.result);\r\n        state.firstOperator = null;\r\n        state.secondNumber = null;\r\n        state.result = null;\r\n        state.status = 'firstNumber';\r\n    }\r\n}\r\n\r\nexport const calcSlice = createSlice({\r\n    name: 'calculator',\r\n    initialState,\r\n    reducers: {\r\n        handleKey: (state, action) => {\r\n            const [type, key] = action.payload;\r\n            // console.log(type);\r\n            // console.log(key);\r\n            if (type===\"num\") {\r\n                handleNumKey(state, key);\r\n            }\r\n            if (type===\"decimal\") {\r\n                handleDecimal(state);\r\n            }\r\n            if (type===\"operator\") {\r\n                handleOperator(state, key);\r\n            }\r\n            if (type===\"clear\") {\r\n                return handleClear(state, key);\r\n            }\r\n            if (type===\"equal\") {\r\n                evaluate(state);\r\n            }\r\n            if (type===\"neg\") {\r\n                handleNeg(state);\r\n            }\r\n        },\r\n        loadHistoryIndex: (state, action) => {\r\n            state = Object.assign({}, state, state.history[action.payload]);\r\n            return state;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { handleKey, loadHistoryIndex } = calcSlice.actions;","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { handleKey } from '../features/calcSlice';\r\nimport './Keys.css'\r\n\r\nconst Key = props => {\r\n    const dispatch = useDispatch()\r\n    return (\r\n    <button key={props.value} className={`${props.type}-key ${ + props.isActive ? '  activeOperator' : ''}`} id={`${props.type}-key-${props.value}`} onClick={() => dispatch(handleKey([props.type, props.value]))}>{props.value}</button>\r\n    )\r\n}\r\n\r\nconst NumKeyPad = () => {\r\n    let NumKeys = [];\r\n    for (let i=0; i < 10; i++) {\r\n        NumKeys.unshift(\r\n            <Key type=\"num\" value={i} key={i}/>\r\n        )\r\n        if (i===0) {\r\n            NumKeys.unshift(\r\n                <Key type=\"decimal\" value=\".\" key=\".\" />\r\n            )\r\n            NumKeys.unshift(\r\n                <Key type=\"equal\" value=\"=\" key=\"=\" />\r\n            )\r\n        }\r\n    }\r\n    return (\r\n        <div id=\"num-keys\">\r\n            {NumKeys}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst operators = ['+','-','*','/'];\r\n\r\nconst Operators = props => {\r\n    const activeOperator = useSelector(state => state.calc.secondOperator || state.calc.firstOperator);\r\n    return (\r\n        <div id=\"operator-keys\">\r\n            {operators.map(operator => {\r\n                const isActive = activeOperator === operator;\r\n                return (<Key type=\"operator\" value={operator} key={operator} isActive={isActive}/>)\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ClearKeys = props => {\r\n    return (\r\n        <div id=\"clear-keys\">\r\n            <Key type=\"clear\" value=\"C\" key=\"C\" />\r\n            <Key type=\"clear\" value=\"CE\" key=\"CE\" />\r\n            <Key type=\"neg\" value={\"\\u00B1\"} key=\"neg\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Keys = () => {\r\n    const dispatch = useDispatch()\r\n    document.addEventListener('keydown', e => {\r\n        let type, key;\r\n        if (Number.isInteger(Number(e.key))) {\r\n            type='num';\r\n            key=e.key;\r\n        } else if (e.key.match(/\\./)) {\r\n            type='decimal';\r\n            key='.';\r\n        } else if (e.key.match(/[+*/-]/)) {\r\n            type='operator';\r\n            key=e.key;\r\n        } else if (e.key === 'Backspace' || e.key === 'Delete') {\r\n            type='clear';\r\n            key='CE';\r\n        } else if (e.key === 'Escape') {\r\n            type='clear';\r\n            key='C';\r\n        } else if (e.key === 'Enter' || e.key === '=') {\r\n            type='equal';\r\n            key='=';\r\n        } else if (e.key === 'm') {\r\n            type='neg'\r\n            key=\"\\u00B1\"\r\n        }\r\n        if (type && key) {\r\n            e.preventDefault();\r\n        }\r\n        // console.log(type, key)\r\n        dispatch(handleKey([type, key]));\r\n    })\r\n    return (\r\n    <div id=\"keys\">\r\n        <NumKeyPad />\r\n        <Operators />\r\n        <ClearKeys />\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Keys;","import React from 'react';\r\n// import { useSelector } from 'react-redux';\r\nimport OperationDisplay from './OperationDisplay';\r\nimport Result from './Result';\r\nimport Keys from './Keys';\r\nimport './Calculator.css';\r\n\r\nconst Calculator = () => {\r\n    // const state = useSelector(state => state);\r\n    return (\r\n        <div id=\"calculator\">\r\n            <OperationDisplay />\r\n            <Result />\r\n            <Keys />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loadHistoryIndex } from '../features/calcSlice'\r\nimport './History.css';\r\n\r\n\r\n\r\nconst History = props => {\r\n    const dispatch = useDispatch();\r\n    const history = useSelector(state => state.calc.history);\r\n\r\n    const historyList = history?.map((entry, i) => (\r\n        <div className=\"history-entry\" key={i} onClick={() => dispatch(loadHistoryIndex(i))}>\r\n            <span className=\"history-operations\">\r\n                {entry.firstNumber + (entry.firstOperator ? (entry.firstOperator + entry.secondNumber) : '') + '= '}\r\n            </span>\r\n            <br/>\r\n            <span className=\"history-result\">\r\n                {entry.result}\r\n            </span>\r\n        </div>\r\n    ))\r\n\r\n    return (\r\n        <div id=\"history\">\r\n            <h3>History</h3>\r\n            {historyList.slice(0,5)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default History;\r\n\r\n","import {configureStore} from '@reduxjs/toolkit';\r\nimport {calcSlice} from './features/calcSlice'\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        calc: calcSlice.reducer\r\n    }\r\n});","import React from 'react';\nimport { Provider } from 'react-redux';\nimport Calculator from './components/Calculator';\nimport History from './components/History';\nimport store from './store';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Provider store={store} >\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h2>\n            React Calculator\n          </h2>\n        </header>\n        <section className=\"calculator\">\n          <Calculator />\n          <History />\n        </section>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}